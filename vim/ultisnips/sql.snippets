# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet function "Create a function" b
CREATE OR REPLACE FUNCTION ${1:function_name}(id INTEGER)
RETURNS ${2:return}
LANGUAGE plpgsql
AS $body$
BEGIN
	RETURN QUERY
  	SELECT id, nombre
			FROM usuarios
      WHERE id = id;
END;
$body$;
endsnippet

snippet returns_table "Return table example sentence"
TABLE (
	${1:column_name} ${2:column_type}
)
endsnippet

snippet raise_exception "Raise an exception"
RAISE EXCEPTION 'Error: %', ${1:exception_message};
endsnippet

snippet raise_notice "Raise a notice"
RAISE NOTICE 'Notice: %', ${1:notice_message};
endsnippet

snippet procedure "Create a procedure" b
CREATE OR REPLACE PROCEDURE ${1:procedure_name}(p_id INTEGER)
LANGUAGE plpgsql
AS $body$
BEGIN
	SELECT id, nombre
	FROM usuarios
	WHERE id = p_id;
END;
$body$;
endsnippet

snippet cursor "Create a cursor" b
--Para utilizar un cursor, se debe declarar una variable de tipo "REFCURSOR", abrir el cursor utilizando una consulta SQL, 
--y luego recorrer los resultados utilizando una combinación de las sentencias FETCH y CLOSE.

CREATE OR REPLACE FUNCTION ${1:function_name}(departamento_id text)
LANGUAGE plpgsql
RETURNS SETOF empleados AS $body$
DECLARE
  empleados_cursor REFCURSOR;
  empleado empleados%ROWTYPE;
BEGIN
  OPEN empleados_cursor FOR SELECT * FROM empleados WHERE departamento = departamento_id;

  LOOP
  	FETCH empleados_cursor INTO empleado;
  	EXIT WHEN NOT FOUND;
  	RETURN NEXT empleado;
  END LOOP;

  CLOSE empleados_cursor;
  RETURN;
END;
$body$;
endsnippet

snippet trigger "Create a trigger" b
CREATE OR REPLACE FUNCTION ${1:function_name}()
LANGUAGE plpgsql
RETURNS TRIGGER AS $body$
BEGIN
  NEW.updated_at = NOW();
	RETURN NEW;
END;
$body$;

CREATE TRIGGER trigger_update_updated_at
BEFORE UPDATE ON ${2:table_name}
FOR EACH ROW
EXECUTE FUNCTION ${1:function_name}();
endsnippet

snippet view "Create a view" b
CREATE OR REPLACE VIEW ${1:view_name} AS
SELECT ${2:column_name}
FROM ${3:table_name}
WHERE ${4:condition};
endsnippet

snippet transaction "Create a transaction" b
BEGIN;
	${1:sql}
COMMIT;
endsnippet

snippet select "Create a select"
SELECT ${1:column_name}
FROM ${2:table_name}
WHERE ${3:column_name} = ${4:value};
endsnippet

snippet insert "Create a insert"
INSERT INTO ${1:table_name} (${2:column_name})
VALUES (${3:value});
endsnippet

snippet update "Create a update"
UPDATE ${1:table_name}
SET ${2:column_name} = ${3:value}
WHERE ${4:column_name} = ${5:value};
endsnippet

snippet delete "Create a delete"
DELETE FROM ${1:table_name}
WHERE ${2:column_name} = ${3:value};
endsnippet

snippet create_table "Create a table" b
CREATE TABLE ${1:table_name} (
	${2:column_name} ${3:data_type} ${4:constraint},
);
endsnippet

snippet alter_table "Create a alter table" b
ALTER TABLE ${1:table_name}
${2:ADD COLUMN} ${3:column_name} ${4:data_type} ${5:constraint};
endsnippet

snippet types "Prints types" b
bigint 	int8 	signed eight-byte integer
bigserial 	serial8 	autoincrementing eight-byte integer
bit [ (n) ] 	  	fixed-length bit string
bit varying [ (n) ] 	varbit [ (n) ] 	variable-length bit string
boolean 	bool 	logical Boolean (true/false)
box 	  	rectangular box on a plane
bytea 	  	binary data (“byte array”)
character [ (n) ] 	char [ (n) ] 	fixed-length character string
character varying [ (n) ] 	varchar [ (n) ] 	variable-length character string
cidr 	  	IPv4 or IPv6 network address
circle 	  	circle on a plane
date 	  	calendar date (year, month, day)
double precision 	float8 	double precision floating-point number (8 bytes)
inet 	  	IPv4 or IPv6 host address
integer 	int, int4 	signed four-byte integer
interval [ fields ] [ (p) ] 	  	time span
json 	  	textual JSON data
jsonb 	  	binary JSON data, decomposed
line 	  	infinite line on a plane
lseg 	  	line segment on a plane
macaddr 	  	MAC (Media Access Control) address
macaddr8 	  	MAC (Media Access Control) address (EUI-64 format)
money 	  	currency amount
numeric [ (p, s) ] 	decimal [ (p, s) ] 	exact numeric of selectable precision
path 	  	geometric path on a plane
pg_lsn 	  	PostgreSQL Log Sequence Number
pg_snapshot 	  	user-level transaction ID snapshot
point 	  	geometric point on a plane
polygon 	  	closed geometric path on a plane
real 	float4 	single precision floating-point number (4 bytes)
smallint 	int2 	signed two-byte integer
smallserial 	serial2 	autoincrementing two-byte integer
serial 	serial4 	autoincrementing four-byte integer
text 	  	variable-length character string
time [ (p) ] [ without time zone ] 	  	time of day (no time zone)
time [ (p) ] with time zone 	timetz 	time of day, including time zone
timestamp [ (p) ] [ without time zone ] 	  	date and time (no time zone)
timestamp [ (p) ] with time zone 	timestamptz 	date and time, including time zone
tsquery 	  	text search query
tsvector 	  	text search document
txid_snapshot 	  	user-level transaction ID snapshot (deprecated; see pg_snapshot)
uuid 	  	universally unique identifier
xml 	  	XML datafloat8 	double precision floating-point number (8 bytes)
inet 	  	IPv4 or IPv6 host address
integer 	int, int4 	signed four-byte integer
interval [ fields ] [ (p) ] 	  	time span
json 	  	textual JSON data
jsonb 	  	binary JSON data, decomposed
line 	  	infinite line on a plane
lseg 	  	line segment on a plane
macaddr 	  	MAC (Media Access Control) address
macaddr8 	  	MAC (Media Access Control) address (EUI-64 format)
money 	  	currency amount
numeric [ (p, s) ] 	decimal [ (p, s) ] 	exact numeric of selectable precision
path 	  	geometric path on a plane
pg_lsn 	  	PostgreSQL Log Sequence Number
pg_snapshot 	  	user-level transaction ID snapshot
point 	  	geometric point on a plane
polygon 	  	closed geometric path on a plane
real 	float4 	single precision floating-point number (4 bytes)
smallint 	int2 	signed two-byte integer
smallserial 	serial2 	autoincrementing two-byte integer
serial 	serial4 	autoincrementing four-byte integer
text 	  	variable-length character string
time [ (p) ] [ without time zone ] 	  	time of day (no time zone)
time [ (p) ] with time zone 	timetz 	time of day, including time zone
timestamp [ (p) ] [ without time zone ] 	  	date and time (no time zone)
timestamp [ (p) ] with time zone 	timestamptz 	date and time, including time zone
tsquery 	  	text search query
tsvector 	  	text search document
txid_snapshot 	  	user-level transaction ID snapshot (deprecated; see pg_snapshot)
uuid 	  	universally unique identifier
xml 	  	XML data
endsnippet
