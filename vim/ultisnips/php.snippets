# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet namespace "Generate namespace" b
namespace `!v substitute(substitute(substitute(expand("%:p"), '\v(.*\/\U+)((\/\w+)+)\/\w+.php$', '\2', ''), '\/', '\\', 'g'), '\\', '', '')`;
endsnippet

snippet php "Php file" b
<?php
	namespace `!v substitute(substitute(substitute(expand("%:p"), '\v(.*\/\U+)((\/\w+)+)\/\w+.php$', '\2', ''), '\/', '\\', 'g'), '\\', '', '')`;

	${1}
endsnippet

# === Laravel ===

snippet pf "Public function" i
		public function 
endsnippet

snippet invoke "Laravel controller invoke method" b
		public function __invoke(Request $request)
		{
		}
endsnippet

snippet Controller "Laravel controller" b
<?php

namespace `!v substitute(substitute(substitute(expand("%:p"), '\v(.*\/\U+)((\/\w+)+)\/\w+.php$', '\2', ''), '\/', '\\', 'g'), '\\', '', '')`;

class `!p snip.rv = snip.basename` extends Controller
{
		${3:// code...}
}
endsnippet

snippet Model "Laravel model" b
<?php

namespace ${1:namespace};

class `!p snip.rv = snip.basename` extends Model
{
		${3:// code...}
}
endsnippet

snippet Test "Laravel phpunit test" b
<?php

namespace ${1:namespace};

class `!p snip.rv = snip.basename` extends TestCase
{
		${3:// code...}
}
endsnippet

snippet Resource "Laravel resource" b
<?php

namespace `!v substitute(substitute(substitute(expand("%:p"), '\v(.*\/\U+)((\/\w+)+)\/\w+.php$', '\2', ''), '\/', '\\', 'g'), '\\', '', '')`;

use Illuminate\Http\Resources\Json\JsonResource;

class `!p snip.rv = snip.basename` extends JsonResource
{
		/**
		* Transform the resource into an array.
		*
		* @param Request $request
		* @return array<string, mixed>
		*/
		public function toArray($request)
		{
				return [
						'id' => $this->id,
						'created_at' => $this->created_at,
						'updated_at' => $this->updated_at,
				];
		}
}
endsnippet

snippet migration "Laravel migration" b
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
		/**
		* Run the migrations.
		*
		* @return void
		*/
		public function up()
		{
		}
	
		/**
		* Reverse the migrations.
		*
		* @return void
		*/
		public function down()
		{
		}
};
endsnippet

snippet setUp "Laravel test set up method" b
		public function setUp(): void
		{
				parent::setUp();
		}
endsnippet

snippet booted "Laravel model booted method" b
		protected static function booted(): void
		{
		}
endsnippet

# === END Laravel ===
