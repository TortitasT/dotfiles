# ZSH Home
export ZSH="$HOME/.zsh"

# Environment
source $ZSH/env.sh 2>/dev/null

# History config
export HISTFILE=$ZSH/.zsh_history
export HISTSIZE=10000
export SAVEHIST=10000
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_FIND_NO_DUPS
setopt INC_APPEND_HISTORY

# ZSH plugins
source $ZSH/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh
source $ZSH/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
source $ZSH/plugins/zsh-completions/zsh-completions.plugin.zsh

# ZSH theme
source $ZSH/themes/spaceship-prompt/spaceship.zsh-theme

# //////////////////////////////////////////////////////////////////////////////////////////////////////
# // USER CONFIG ///////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////////////////////////////////////////

# You may need to manually set your language environment
export LANG=es_ES.UTF-8
export LANGUAGE=es_ES.UTF-8
export LC_ALL=es_ES.UTF-8

# In kitty set terminal type to xterm-256color so ssh works properly
# If this is set, neovim on tmux will have weird background color in text
# export TERM=xterm-256color

# Emacs keymap for zsh, needs to be set because editor is nvim
# thx https://catonmat.net/bash-emacs-editing-mode-cheat-sheet
# C = Ctrl, M = Alt
# Go to the beginning of the line <C-a>
# Go to the end of the line <C-e>
# Go to the previous word <M-b>
# Go to the next word <M-f>
# Delete the previous word <M-Backspace>
# Delete the next word <M-d>
# Undo <C-_> (unsure)
# Redo <M-_> (unsure)
bindkey -A emacs main

# // THEME ////////////////////////////////

# Spaceship theme
SPACESHIP_PROMPT_ORDER=(
  dir           # Current directory section
  git           # Git section (git_branch + git_status)
  hg            # Mercurial section (hg_branch  + hg_status)
  package       # Package version
  node          # Node.js section
  ruby          # Ruby section
  xcode         # Xcode section
  swift         # Swift section
  golang        # Go section
  php           # PHP section
  rust          # Rust section
  docker        # Docker section
  aws           # Amazon Web Services section
  venv          # virtualenv section
  conda         # conda virtualenv section
  dotnet        # .NET section
  exec_time     # Execution time
  line_sep      # Line break
  battery       # Battery level and status
  jobs          # Backgound jobs indicator
  exit_code     # Exit code section
  char          # Prompt character
)

# // ALIAS ////////////////////////////////
#
# Misc
alias notes="nvim ~/notes.md"
alias cls="clear"
alias ls="ls --color=auto"
alias ll="ls -l"
alias la="ls -la"
alias l="ls -l"
alias x="Hyprland"
alias q="exit"
alias :q="exit"
alias .q="exit"
alias diff="diff --color=always"
alias less="less -R"
alias v="nvim"
alias nv="nvim"
alias doo="chmod 700 ./do.sh && ./do.sh"
alias gitzip="git archive HEAD -o " # gitzip <filename>.zip to create a zip file using gitignore
alias ed="nvim"
# alias tn="tmux new -s $(pwd | sed 's/.*\///g')"
alias tn="tmux ls && read tmux_session && tmux attach -t ${tmux_session:-default} || tmux new -s ${tmux_session:-default}"
alias reload="source ~/.zshrc"
alias art="php artisan"
alias artest="vendor/bin/phpunit --testdox"
alias py="python3"
alias pip="pip3"
alias gradlew="./gradlew"

# function composer() {
#   if [ -f "composer-local.json" ]; then
#     COMPOSER=composer-local.json php /usr/local/bin/composer $@
#   else
#     php /usr/local/bin/composer $@
#   fi
# }

alias g="git"
alias gg="cd ~/Git"
alias gl="git log --graph --oneline --decorate --all"
alias gs="git status"
alias ga="git add -p"
alias gca="git commit --amend"
alias gb="git branch --sort=-committerdate"
alias gd="git diff"

function gc() {
  message="$1"

  echo "Commit message: $message"

  if command -v commitlint &> /dev/null
  then
    echo $message | commitlint
  fi

  if [ $? -eq 0 ]; then
    git commit -m "$message"
  fi
}

function gco() {
  if [ -z "$1" ]; then
    if command -v fzf &> /dev/null
    then
      git checkout $(git branch -r --sort=-committerdate | sed 's/origin\///g' | fzf)
    else
      echo "fzf not found, install it to use this feature"
    fi
  fi

  git checkout $@
}

function gp() {
  git push origin $(git branch --show-current)
}

function gpl() {
  git pull origin $(git branch --show-current)
}

#
# // ALIAS END ////////////////////////////


# // MAIN ////////////////////////////
#

# Preferred editor
export EDITOR="nvim"

# Add local bin to path
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/bin:$PATH"

#
# // MAIN END ////////////////////////////

# Custom rc file for each environment (OS) where we can set environment variables
if [ -f ~/.zshrc.local ]; then
  source ~/.zshrc.local
fi

# Custom rc file for each environment (OS) where we can set environment variables that are secret
# and should not be commited to the repository
if [ -f ~/.zshrc.secret ]; then
  source ~/.zshrc.secret
fi

# bun completions
[ -s "/Users/vgf/.bun/_bun" ] && source "/Users/vgf/.bun/_bun"
