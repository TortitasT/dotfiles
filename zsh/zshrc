# ZSH Home
export ZSH="$HOME/.zsh"

# Environment
source $ZSH/env.sh 2>/dev/null

# History config
export HISTFILE=$ZSH/.zsh_history
export HISTSIZE=10000
export SAVEHIST=10000
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_FIND_NO_DUPS
setopt INC_APPEND_HISTORY

# ZSH plugins
source $ZSH/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh
source $ZSH/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
source $ZSH/plugins/zsh-completions/zsh-completions.plugin.zsh

# ZSH theme
source $ZSH/themes/spaceship-prompt/spaceship.zsh-theme

# //////////////////////////////////////////////////////////////////////////////////////////////////////
# // USER CONFIG ///////////////////////////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////////////////////////////////////////

# You may need to manually set your language environment
export LANG=es_ES.UTF-8

# Preferred editor
export EDITOR="nvim"

# Compilation flags
if [[ "$OSTYPE" == "darwin"* ]]; then
  export ARCHFLAGS="-arch arm64"
else
  export ARCHFLAGS="-arch x86_64"
fi

# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# FreeBSD $HOME/.local/bin path is not in $PATH by default ($HOME/bin is)
if [[ "$OSTYPE" == "freebsd"* ]]; then
  export PATH="$PATH:$HOME/.local/bin"
fi

# // THEME ////////////////////////////////

# Spaceship theme
SPACESHIP_PROMPT_ORDER=(
  dir           # Current directory section
  git           # Git section (git_branch + git_status)
  hg            # Mercurial section (hg_branch  + hg_status)
  package       # Package version
  node          # Node.js section
  ruby          # Ruby section
  xcode         # Xcode section
  swift         # Swift section
  golang        # Go section
  php           # PHP section
  rust          # Rust section
  docker        # Docker section
  aws           # Amazon Web Services section
  venv          # virtualenv section
  conda         # conda virtualenv section
  dotnet        # .NET section
  exec_time     # Execution time
  line_sep      # Line break
  battery       # Battery level and status
  jobs          # Backgound jobs indicator
  exit_code     # Exit code section
  char          # Prompt character
)

# // ALIAS ////////////////////////////////
#
# Misc
alias cls="clear"
alias ls="ls --color=auto"
alias ll="ls -l"
alias la="ls -la"
alias l="ls -l"
alias x="Hyprland"
alias q="exit"
alias :q="exit"
alias .q="exit"
alias diff="diff --color=always"
alias less="less -R"
alias v="nvim"
alias nv="nvim"

if [[ "$OSTYPE" == "darwin"* ]]; then
  function systemctl() {
    if [ "$1" == "status" ]; then
      brew services info $2
      return
    fi

    brew services $@
  }
fi

if [[ "$OSTYPE" == "linux-gnu"* ]]; then 
  function copy() {
    cat $1 | xclip -selection clipboard -i
  } 

  function install() {
    is_on_repos=$(pacman -Ss $1 | grep $1 | wc -l)

    echo "$1;" >> $HOME/.install.log

    if [ $is_on_repos -eq 0 ]; then
      echo "Installing $1 from AUR"
      yay -S --noconfirm $1
      return 
    fi

    echo "Installing $1"
    sudo pacman -S --noconfirm $1
  }

  alias lock="swaylock --no-unlock-indicator --color 121212"

  function schedule-poweroff() {
    MINUTES=$1
    if [ -z "$MINUTES" ]; then
      echo "Usage: poweroff <minutes>"
    else
      echo "Powering off in $MINUTES minutes"
      sleep $((MINUTES * 60))
      sudo poweroff
    fi
  }

  alias logoff="i3-msg exit"

  function ast() {
    if [ -z "$1" ]; then
      echo "Usage: ast <project>"
    else
      android-studio $1 &>/dev/null &
    fi
  }

  alias open="xdg-open"
fi

if [[ "$OSTYPE" == "freebsd"* ]]; then alias poweroff="doas poweroff"; fi
alias doo="chmod 700 ./do.sh && ./do.sh"
if [[ "$OSTYPE" == "freebsd"* ]]; then alias ii="nohup pcmanfm > /dev/null 2>&1&"; fi
alias gitzip="git archive HEAD -o " # gitzip <filename>.zip to create a zip file using gitignore
alias ed="nvim"
# alias emacs="emacs -nw"
alias tn="tmux new -s $(pwd | sed 's/.*\///g')"
function composer() {
  if [ -f "composer-local.json" ]; then
    COMPOSER=composer-local.json php /usr/local/bin/composer $@
  else
    php /usr/local/bin/composer $@
  fi
}
# Git
alias g="git"
if [[ "$OSTYPE" == "darwin"* ]]; then alias gg="cd ~/Documents/Git"; fi
if [[ "$OSTYPE" == "freebsd"* ]]; then alias gg="cd ~/Git"; fi
if [[ "$OSTYPE" == "linux-android"* ]]; then alias gg="cd ~/Git"; fi
if [[ "$OSTYPE" == "linux-gnu"* ]]; then alias gg="cd ~/Git"; fi
alias gl="git log --graph --oneline --decorate --all"
alias gs="git status"
alias ga="git add --all"
function gc() {
  message="$1"

  echo "Commit message: $message"

  if command -v commitlint &> /dev/null
  then
    echo $message | commitlint
  fi

  if [ $? -eq 0 ]; then
    git commit -m "$message"
  fi
}
alias gca="git commit --amend"
function gco() {
  if [ -z "$1" ]; then
    if command -v fzf &> /dev/null
    then
      git checkout $(git branch -r --sort=-committerdate | sed 's/origin\///g' | fzf)
    fi
  fi

  git checkout $@
}
alias gb="git branch --sort=-committerdate"
alias gd="git diff"
function gp() {
  git push origin $(git branch --show-current)
}
function gpl() {
  git pull origin $(git branch --show-current)
}
alias reload="source ~/.zshrc"
# Laravel
alias art="php artisan"
alias artest="vendor/bin/phpunit --testdox"
# Python
alias py="python3"
alias pip="pip3"
# Java
alias gradlew="./gradlew"
#
# // ALIAS END ////////////////////////////


# // MAIN ////////////////////////////
#
if [[ "$OSTYPE" == "freebsd"* ]]; then
  eval `ssh-agent`
  neofetch
fi

if [[ "$OSTYPE" == "linux-android"* ]]; then
  eval `ssh-agent`
fi

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
  neofetch --kitty $HOME/.config/neofetch/tux.png
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
  # Load autosuggestions
  source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh

  # LaTeX
  export PATH="/Library/TeX/texbin/:$PATH"

  #Â Git identity manager
  export PATH="$HOME/bin/git-idm:$PATH"

  # iTerm2 integration
  test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

  # Bash completion nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

  # User bin directory
  export PATH="$HOME/bin:$PATH"
  export PATH="$HOME/.local/bin:$PATH"

  # Funny voice when starting the terminal in macos
  (&>/dev/null say $(curl -s https://whatthecommit.com/index.txt) &)

  # opam configuration
  [[ ! -r ~/.opam/opam-init/init.zsh ]] || source ~/.opam/opam-init/init.zsh  > /dev/null 2> /dev/null

  # GO
  export GOPATH=$(go env GOPATH)
  export PATH="$GOPATH/bin:$PATH"

  # pnpm
  export PNPM_HOME="/Users/vgf/Library/pnpm"
  case ":$PATH:" in
    *":$PNPM_HOME:"*) ;;
    *) export PATH="$PNPM_HOME:$PATH" ;;
  esac
  # pnpm end

  # Zoxide
  eval "$(zoxide init zsh)"

  #THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
  export SDKMAN_DIR="$HOME/.sdkman"
  [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
fi

# Deno bin
export DENO_INSTALL="$HOME/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

# Pyenv
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
  export PYENV_ROOT="$HOME/.pyenv"
  command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"

  # GO
  export GOPATH=$(go env GOPATH)
  export PATH="$GOPATH/bin:$PATH"

  # pnpm
  export PNPM_HOME="/home/tortitas/.local/share/pnpm"
  case ":$PATH:" in
    *":$PNPM_HOME:"*) ;;
    *) export PATH="$PNPM_HOME:$PATH" ;;
  esac
  # pnpm end
  
  # Android sdk
  export ANDROID_HOME="$HOME/Android/Sdk"
  
  # opam configuration
  [[ ! -r ~/.opam/opam-init/init.zsh ]] || source ~/.opam/opam-init/init.zsh  > /dev/null 2> /dev/null

  # dotnet
  export PATH="$PATH:$HOME/.dotnet/tools"

  #THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
  export SDKMAN_DIR="$HOME/.sdkman"
  [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
fi

# Emacs keymap for zsh, needs to be set because editor is nvim
# C = Ctrl, M = Alt
# Go to the beginning of the line <C-a>
# Go to the end of the line <C-e>
# Go to the previous word <M-b>
# Go to the next word <M-f>
# Delete the previous word <M-Backspace>
# Delete the next word <M-d>
# Undo <C-_> (unsure)
# Redo <M-_> (unsure)
bindkey -A emacs main

#
# // MAIN END ////////////////////////////

# Bun
[ -s "/home/tortitas/.bun/_bun" ] && source "/home/tortitas/.bun/_bun"

export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
