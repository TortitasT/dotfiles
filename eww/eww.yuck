(defwindow powermenu
  :monitor 0 ;; wayland users may need this
  :stacking "fg"
  :windowtype "normal"
  :wm-ignore true
  :geometry (geometry :width "100%" :height "100%")
  (powermenu_layout))

(defpoll time :interval "5s"
  :initial `date +'{"hour":"%H","min":"%M"}'`
  `date +'{"hour":"%H","min":"%M"}'`)
(defpoll net :interval "100s"
  :initial `N/A`
  `nmcli -t -f SIGNAL,ACTIVE device wifi \
    | awk -F':' '{if($2=="yes")print$1}'`)

(defwidget powermenu_layout []
  (box :class "layout" :space-evenly false :orientation "vertical"
    (box :valign "start" :space-evenly false :spacing 25
      (_sundial)
      (_battery :status {EWW_BATTERY.BAT0.status}
                :percentage {EWW_BATTERY.BAT0.capacity})
      (_volume)
      (_brightness)
      (_network)
      (label :text "|" :class "sep")
      (button :onclick "eww close powermenu" :class "close-btn" "󱎘"))
    (box :space-evenly false :hexpand true :vexpand true
      (box :spacing 15 :class "clock" :space-evenly false
            :valign "end" :halign "start"
        (label :text "")
        (label :text "${time.hour}:${time.min}"))
      (_buttons :shutdown "poweroff" :reboot "reboot"
                :logout "loginctl kill-session self"
                :shutdown_icon "" :reboot_icon "󰑓"
                :logout_icon "󰗽"))))

(defwidget _battery [percentage status]
  (box :class "battery" :space-evenly false :spacing 8
    (label :text "${status == "Discharging" ? "󰂁" : "󰂄"} ${percentage}%")))

(defpoll ip
  :interval "100s"
  :initial `ip -o -4 addr list wlan0 | awk '{print $4}' | cut -d/ -f1`
  `ip -o -4 addr list wlan0 | awk '{print $4}' | cut -d/ -f1`)
(defwidget _network []
  (box :class "network"
       :space-evenly false
       :spacing 8
    (label :text {ip != "" ? "󰤨  ${ip}" : "󰤭"})))

(defwidget _buttons [shutdown shutdown_icon reboot
                    reboot_icon logout logout_icon]
  (box :class "actions" :spacing 5
       :vexpand true :hexpand true
       :valign "end" :halign "end"
       :space-evenly false
    (button :onclick shutdown shutdown_icon)
    (button :onclick reboot reboot_icon)
    (button :onclick logout logout_icon)))

(defwidget _sundial []
  (label :class "sundial" :halign "end" :hexpand true
         :text {time.hour >= 2 && time.hour <= 4 ? "Early Morning" :
               time.hour <= 5 ? "Dawn" :
               time.hour >= 6
                && (time.hour <= 8 && time.min <= 59)
                  ? "Morning" :
               time.hour >= 9
                 && (time.hour <= 11 && time.min <= 59)
                   ? "Late Morning" :
               time.hour == 12 && time.min <= 29
                 ? "Midday" :
               time.hour >= 12 && time.hour <= 16
                 ? "Afternoon" :
               time.hour > 16 && time.hour <= 17
                 ? "Late Afternoon" :
               (time.hour >= 17 && time.min <= 1)
                 || (time.hour <= 18 && time.min <= 20)
                   ? "Early Evening" :
               time.hour >= 18 && time.hour <= 19
                 ? "Dusk" :
               time.hour > 19 && time.hour <= 21
                 ? "Late Evening" :
               time.hour > 21 ? "Night" : "Midnight"}))

(defpoll volume :interval "200ms" "pamixer --get-volume")
(defpoll is_muted :interval "200ms" "pamixer --get-mute")
(defwidget _volume []
  (box 
    :orientation "h" 
    :space-evenly "false" 
    :spacing "8"
    :class "volume"
      (eventbox 
        :onscroll '[ {} = down ] || pamixer --increase 5; [ {} = up ] || pamixer --decrease 5'
          (button 
            :onclick "pamixer --toggle-mute"
            :tooltip "Toggle Mute"
              (label :text {is_muted == "false" ? "󰕾 ${volume}" : "󰖁 ${volume}"})))
  )
)

(defpoll brightness :interval "200ms" "brightnessctl g")
(defwidget _brightness []
  (box 
    :orientation "h" 
    :space-evenly "false" 
    :spacing "8"
    :class "brightness"
      (eventbox 
        :onscroll '[ {} = down ] || brightnessctl s +2%; [ {} = up ] || brightnessctl s 2%-'
          (label
            :text "󰃞 ${brightness}"
              ))))

;; vim:ft=yuck

